package ar.net.epancie.fibertelzonemaps;

import java.io.IOException;
import java.util.List;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.http.AndroidHttpClient;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;


@SuppressWarnings("deprecation")
public class FibertelZoneMapsMainActivity extends Activity {

	private final String TAG = "FibertelZoneMapsMainActivity";
	private static final LatLng DEFAULTPOS = new LatLng(-34.6037232, -58.3815931);//BS AS
	private static final String URL = "http://200.42.4.24/cgi-bin/fiberzonejson.pl";
	
	//Map Object
	private GoogleMap mMap;
	
	
	private static final long ONE_MIN = 1000 * 60;
	private static final long TWO_MIN = ONE_MIN * 2;
	private static final long FIVE_MIN = ONE_MIN * 5;
	private static final long MEASURE_TIME = 1000 * 30;
	private static final long POLLING_FREQ = 1000 * 10;
	private static final float MIN_ACCURACY = (float) 25.0;
	private static final float MIN_LAST_READ_ACCURACY = (float) 500.0;
	private static final float MIN_DISTANCE = (float) 10.0;
	
	// Current best location estimate
	private Location mBestReading;
	
	// Reference to the LocationManager and LocationListener
	private LocationManager mLocationManager;
	private LocationListener mLocationListener;
	
	private LatLng mMyPossition;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        Log.i(TAG, "-------------Enter to OnCreate------------------");
        setContentView(R.layout.activity_fibertel_zone_maps_main);
        
        Log.i(TAG, "OnCreate: HttpGetTask.execute(" + URL + ")");
        new HttpGetTask().execute(URL);
        
        
		// Acquire reference to the LocationManager
		if (null == (mLocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE)))
			finish();
		
		
		// Get best last location measurement
		mBestReading = bestLastKnownLocation(MIN_LAST_READ_ACCURACY, FIVE_MIN);
		
		mLocationListener = new LocationListener() {
			
			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				// TODO Auto-generated method stub
				Log.i(TAG, "---------------------LocationListener -> onStatusChanged-------------------");		
			}
			
			@Override
			public void onProviderEnabled(String provider) {
				// TODO Auto-generated method stub
				Log.i(TAG, "---------------------LocationListener -> onProviderEnabled-------------------");
			}
			
			@Override
			public void onProviderDisabled(String provider) {
				// TODO Auto-generated method stub
				Log.i(TAG, "---------------------LocationListener -> onProviderDisabled-------------------");
			}
			
			@Override
			public void onLocationChanged(Location location) {
				Log.i(TAG, "---------------------LocationListener -> onLocationChanged-------------------");
				// Determine whether new location is better than current best estimate
				if (null == mBestReading || location.getAccuracy()<mBestReading.getAccuracy() ){
					//update the best reading with the new location
					mBestReading = location;
				// If the accuracy of new mBestReading in < Min_ACCURACY then the reading is good enough and 
				// des resgiter the LocationListener to dont use resourses.
				if (mBestReading.getAccuracy() < MIN_ACCURACY ) {
					mLocationManager.removeUpdates(mLocationListener);
				}
			}
				
				
			}
		};
        
        
        
    }



	
	// Get the last known location from all providers
	// return best reading that is as accurate as minAccuracy and
	// was taken no longer then minAge milliseconds ago. If none,
	// return null.
	private Location bestLastKnownLocation(float minAccuracy, long maxAge) {

		Log.i(TAG, "---------------------bestLastKnownLocation-------------------");
		
		Location bestResult = null;
		float bestAccuracy = Float.MAX_VALUE;
		long bestAge = Long.MIN_VALUE;

		List<String> matchingProviders = mLocationManager.getAllProviders();

		for (String provider : matchingProviders) {

			Location location = mLocationManager.getLastKnownLocation(provider);

			if (location != null) {

				float accuracy = location.getAccuracy();
				long time = location.getTime();

				if (accuracy < bestAccuracy) {

					bestResult = location;
					bestAccuracy = accuracy;
					bestAge = time;

				}
			}
		}
		
		// Return best reading or null
		if (bestAccuracy > minAccuracy
				|| (System.currentTimeMillis() - bestAge) > maxAge) {
			return null;
		} else {
			return bestResult;
		}
	
	
	}
	
	
	private class HttpGetTask extends AsyncTask<String, Void, List<AccessPointData>> {
  	    
    	@SuppressWarnings("deprecation")
		AndroidHttpClient mClient = AndroidHttpClient.newInstance("");
    	
		@Override
		protected List<AccessPointData> doInBackground(String... params) {
			Log.i(TAG, "-------------List doInBackground----------------");
			
			HttpGet request = new HttpGet(params[0]);
			JOSNGetAccessPointData responseHandler = new JOSNGetAccessPointData();

			try {
				// Get Access Point data in JSON format and Parse data into a list of AccessPointData List
				return mClient.execute(request, responseHandler);

			} catch (ClientProtocolException e) {
				Log.i(TAG, "List doInBackground->ClientProtocolException:" + e.toString());
			} catch (IOException e) {
				Log.i(TAG, "List doInBackground->IOException:"+ e.toString());
			}

			return null;
		}
    	
		
		@Override    
	    protected void onPostExecute(List<AccessPointData> result) {
	    	
	    	Log.i(TAG, "-------------onPostExecute------------------");

	    	//to obtain my possition
    		if (mBestReading == null){
    			Log.i(TAG, "HttpGetTask ->onPostExecute: it is not posible to determine your possition");
    			Toast.makeText(getApplicationContext(), "it is not posible to determine your possition", Toast.LENGTH_LONG).show();
    			mMyPossition =  DEFAULTPOS;
    		}else{
    			//get Lat and Lng form mBestReading and assing to mMyPossition
    			double mLng =  mBestReading.getLongitude();
    			double mLat =  mBestReading.getLatitude();
    			mMyPossition = new LatLng(mLat, mLng);
    		}
	    	
    		//resolve de map fragment
	    	mMap =  ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
	    	
   	
	    	if (mMap != null){
	    		Log.i(TAG, "onPostExecute: mMap exist");
	    		//add a mark for every access point in the map
	    		mMap.addMarker(new MarkerOptions().position(DEFAULTPOS).title("BSAS"));
	    		
	    		for(AccessPointData apData: result){
	    			//get position
	    			LatLng mPosition =  new LatLng( apData.getLat(), apData.getLng());
	    			//get location Type
	    			String mLocationType = apData.getLocationType();
	    			Log.i(TAG, "onPostExecut->new Marker : Lng=" + apData.getLng() + "; Lat=" + apData.getLat() + "; LocationType=" + apData.getLocationType());
	    			//set marker options
	    			MarkerOptions mMarkerOption = new MarkerOptions();
	    			mMarkerOption.position(mPosition); //posstion of the marker
	    			mMarkerOption.title(mLocationType); //descripion of the marker
	    			
	    			//mMarkerOption.icon(BitmapDescriptorFactory.fromResource(R.drawable.))
	    			//add the mark to the mMap
	    			
	    			mMap.addMarker(mMarkerOption);
	    		 			   			
	    		}
	    		
	    		
		  		// Move the camera instantly to my Possition if it possible	
	    		mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(mMyPossition, 14));		
	    	}
	    	
	    	
	    	if (mClient != null){
	    		mClient.close();
	    	}
	    	
	    }
    
    }

}
